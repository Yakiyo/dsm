name: Release

on:
  release:
    types:
      - created
env:
  RELEASE_VERSION: '${{ github.event.release.tag_name }}'
jobs:
  crate_metadata:
    name: Extract crate metadata
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      - name: Extract crate information
        id: crate_metadata
        run: >
          cargo metadata --no-deps --format-version 1 | jq -r '"name=" +
          .packages[0].name' | tee -a $GITHUB_OUTPUT

          cargo metadata --no-deps --format-version 1 | jq -r '"version=" +
          .packages[0].version' | tee -a $GITHUB_OUTPUT

          cargo metadata --no-deps --format-version 1 | jq -r '"maintainer=" +
          .packages[0].authors[0]' | tee -a $GITHUB_OUTPUT

          cargo metadata --no-deps --format-version 1 | jq -r '"homepage=" +
          .packages[0].homepage' | tee -a $GITHUB_OUTPUT

          cargo metadata --no-deps --format-version 1 | jq -r '"msrv=" +
          .packages[0].rust_version' | tee -a $GITHUB_OUTPUT
    outputs:
      name: '${{ steps.crate_metadata.outputs.name }}'
      version: '${{ steps.crate_metadata.outputs.version }}'
      maintainer: '${{ steps.crate_metadata.outputs.maintainer }}'
      homepage: '${{ steps.crate_metadata.outputs.homepage }}'
      msrv: '${{ steps.crate_metadata.outputs.msrv }}'
      
  release:
    runs-on: '${{ matrix.os }}'
    needs: crate_metadata
    env:
      CARGO: cross
      TARGET_FLAGS: ''
      TARGET_DIR: ./target
      RUST_BACKTRACE: 1
    strategy:
      matrix:
        build:
          - linux
          - linux-arm
          - macos
          - win-msvc
          - win32-msvc
        include:
          - build: linux
            os: ubuntu-latest
            rust: nightly
            target: x86_64-unknown-linux-musl
          - build: linux-arm
            os: ubuntu-latest
            rust: nightly
            target: arm-unknown-linux-gnueabihf
          - build: macos
            os: macos-latest
            rust: nightly
            target: x86_64-apple-darwin
          - build: win-msvc
            os: windows-latest
            rust: nightly
            target: x86_64-pc-windows-msvc
          - build: win32-msvc
            os: windows-latest
            rust: nightly
            target: i686-pc-windows-msvc
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: '${{ matrix.rust }}'
          target: '${{ matrix.target }}'

      - name: Use Cross
        shell: bash
        run: |
          cargo install cross
          echo "CARGO=cross" >> $GITHUB_ENV
          echo "TARGET_FLAGS=--target ${{ matrix.target }}" >> $GITHUB_ENV
          echo "TARGET_DIR=./target/${{ matrix.target }}" >> $GITHUB_ENV
      - name: Show command used for Cargo
        run: |
          echo "cargo command is: ${{ env.CARGO }}"
          echo "target flag is: ${{ env.TARGET_FLAGS }}"
          echo "target dir is: ${{ env.TARGET_DIR }}"
      - name: Build release binary
        run: '${{ env.CARGO }} build --verbose --release ${{ env.TARGET_FLAGS }}'
      - name: Rename binary
        shell: bash
        run: |
          EXE_suffix=""
          case ${{ matrix.target }} in
            *-pc-windows-*) EXE_suffix=".exe" ;;
          esac;
          BIN_NAME="${{ needs.crate_metadata.outputs.name }}${EXE_suffix}"
          BIN_PATH="target/${{ matrix.target }}/release/${BIN_NAME}"
          BUILD_NAME="${{ needs.crate_metadata.outputs.name }}-${{
          needs.crate_metadata.outputs.version }}-${{ matrix.target
          }}${EXE_suffix}"
          mv ${BIN_PATH} ${BUILD_NAME}

          echo "BUILD_NAME=${BUILD_NAME}" >> $GITHUB_ENV
          
      - name: Upload Files
        run: 'gh release upload ${{ env.RELEASE_VERSION }} ${{ env.BUILD_NAME }}'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
